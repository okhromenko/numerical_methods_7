from prettytable import PrettyTable


def table_output(cons, b, z, text):
    table = PrettyTable()
    print(text)
    for i in range(len(cons)):
        table.add_row(
            [cons[i][0], cons[i][1], cons[i][2], cons[i][3], cons[i][4], cons[i][5], cons[i][6], cons[i][7], cons[i][8],
             cons[i][9], cons[i][10], cons[i][11], cons[i][12], cons[i][13], b[i]])
    table.add_row([z[0], z[1], z[2], z[3], z[4], z[5], z[6], z[7], z[8], z[9], z[10], z[11], z[12], z[13], b[len(b) - 1]])
    print(table)


def dual(cons, z, b):
    # cons = [[0.0, 0.5206611570247928, 1.413223140495867, 0.6033057851239669, 1.0, 0.3636363636363633, 0, 0, 0, 0.057851239669421385, 0, -0.008264462809917314, 0.03305785123966937, -0.305785123966942],
    #         [1.0, -1.4803719008264462, -0.7324380165289256, -0.7768595041322315, 0, -0.07954545454545485, 0, 0, 0, -0.09504132231404955, 0, -0.18285123966942146, 0.10640495867768598, 0.35950413223140487],
    #         [0.0, 0.2964876033057857, -0.1952479338842973, 0.1074380165289256, 0, 0.19318181818181832, 0, 1, 0, -0.11983471074380161, 0, 0.10640495867768598, -0.05061983471074377, 0.061983471074380125],
    #         [0.0, 1.2840909090909092, 0.05681818181818199, 0.5454545454545456, 0, -0.12499999999999928, 1, 0, 0, 0.045454545454545456, 0, 0.011363636363636395, -0.17045454545454547, 0.04545454545454555],
    #         [0.0, -4.923553719008259, -3.2210743801652875, 0.13223140495867725, 0, -5.204545454545453, 0, 0, 0, -0.6859504132231401, 1, -0.080578512396694, -0.427685950413223, 0.7685950413223139],
    #         [0.0, 0.13739669421488188, -0.6270661157024779, -1.43801652892562, 0, -0.05681818181817677, 0, 0, 1, -0.6652892561983468, 0, 0.22004132231405005, -0.7551652892561982, 0.5165289256198344]]
    # b = [0.2148760330578516, 0.004132231404958568, 0.4834710743801652, 0.9545454545454544, 2.5950413223140485, 8.028925619834709, -4.40495867769]
    # z = [0, 4.32644628099, -1.97107438017, -0.86776859504, 0, -0.95454545455, 0, 0, 0, 0.31404958677, 0, 0.1694214876, -0.17768595041, 0.76859504132]

    # cons = [[0.0, 0.0, 2.4260265319014582, -14.949463044851557, 0.0, 0.0, -1.2344914718888196, 0.0, -0.8932406822488949,
    #          1.0, 0.0, 0.3144662034112448, 0.6573594440934936, 0.0],
    #         [0.0, 0.0, -0.5300063171193934, 1.3689197725837006, 0.0, 1.0, 0.008212255211623429, 0.0,
    #          -0.12065698041692995, 0.0, 0.0, 0.11560328490208463, -0.061276058117498367, 0.0],
    #         [1.0, 0.0, 0.937586860391662, -1.0726468730259011, 0.0, 0.0, -0.06291850915982321, 0.0, -0.0909665192672142,
    #          0.0, 0.0, -0.03954516740366387, 0.19254579911560332, 0.0],
    #         [0.0, 0.0, 8.328363866077073, -16.449778900821237, 0.0, 0.0, -0.6730259001895146, 0.0, -1.2501579279848396,
    #          0.0, 0.0, -0.8587492103600751, 1.5295009475679096, 1.0],
    #         [0.0, 0.0, 0.33089071383449126, -0.017687934301958003, 1.0, 0.0, 0.042072015161086565, 0.0,
    #          0.01263423878711308, 0.0, 0.0, -0.10006317119393557, 0.03992419456727731, 0.0],
    #         [0.0, 0.0, 13.45533796588756, -9.737207833228053, 0.0, 0.0, -0.7393556538218578, 0.0, -0.04485154769425184,
    #          0.0, 1.0, -0.48477574226152853, 0.1782691092861659, 0.0],
    #         [0.0, 0.0, -2.1457991156032783, -13.331648768161733, 0.0, 0.0, -0.6611497157296284, 1.0,
    #          -1.7631080227416307, 0.0, 0.0, -0.07618445988629163, 1.3485786481364506, 0.0],
    #         [0.0, 1.0, 0.40341124447251975, -0.21667719519898787, 0.0, 0.0, -0.03461781427668978, 0.0,
    #          0.1547694251421353, 0.0, 0.0, -0.02577384712571061, -0.11092861655085295, 0.0]]
    # b = [0.15590650663297548, 0.05811749842072018, 0.0008843967150979204, 0.25243209096651936, 0.00543272267845862,
    #      0.09071383449147193, 0.15186355022109935, 0.016550852811118105, -0.08098547062]
    # z = [0.0, 0, -0.14188250158, 0.93809222995, 0, 0, 0.04725205306, 0, 0.04421983575, 0, 0, 0.04977890082,
    #      -0.06026531901, 0]

    # cons = [[1, -0.57, 0, 0, 0, 0, 0, 0, -0.9, 0, 0.02, 0.04, -0.01, 0],
    #         [0, 1.68, 0, 1, 0, 0, 0, -0.12, 0.14, 0, -0, 0, -0.03, 0],
    #         [0, -12.58, 0, 0, 0, 0, 0,  0.16, -1.68, 0, 0.34, -0.58, 0.63, 1],
    #         [0, -0.47, 1, 0, 0, 0, 0, 0.06, -0.05, 0, 0.03, -0.03, -0.04, 0],
    #         [0, 0.99, 0, 0, 0, 1, 0, 0.02, 0.07, 0, -0.09, 0.03, -0.03, 0],
    #         [0, -0.17, 0, 0, 1, 0, 0, 0.01, -0.03, 0, 0, -0.07, 0.06, 0],
    #         [0, 10.16, 0, 0, 0, 0, 0, 0.19, 0.07, 1, -0.51, 0.57, -1.53, 0],
    #         [0, -8.57, 0, 0, 0, 0, 1, 0.61, -0.91, 0, -0.33, -0.15, -0.62, 0]]
    #
    # b = [0.04, 0.01, 0.14, 0.03, 0.01, 0.02, 0.2, 0.41, -0.10]
    # z = [0, -0.47, 0, 0, 0, 0, 0, 0.2, -0.3, 0, 0.4, 0.03, 0.05, 0]

    cons = [[3, 6, 3, 5, 4, 2, 5, 7, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [5, 2, 6, 3, 8, 4, 2, 9, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
            [4, 8, 5, 2, 4, 7, 4, 6, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
            [6, 2, 7, 3, 8, 2, 5, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0],
            [2, 9, 4, 5, 4, 1, 7, 3, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0],
            [1, 3, 6, 3, 5, 2, 1, 2, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1]
            ]
    b = [1, 8, 5, 7, 9, 3, -33]
    z = [-21, -30, -31, -21, -33, -18, -24, -28, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]

    table_output(cons, b, z, 'Начальная симплекс таблица:')

    basis = [False] * len(z)
    for i in range(14, 22):
        basis[i] = True
    # basis[0] = True
    # basis[2] = True
    # basis[3] = True
    # basis[4] = True
    # basis[5] = True
    # basis[6] = True
    # basis[9] = True
    # basis[13] = True
    step = 0
    while True:
        step += 1
        # проверяем надо ли что-то делать
        sign = 1
        for i in range(len(z)):
            if round(z[i], 2) < 0:
                sign = -1
        if sign > 0:
            break
        # ищем опорный столбец
        min_number = z[0]
        min_column = 0
        for i in range(len(z)):
            if z[i] < min_number:
                min_number = z[i]
                min_column = i
        # ищем опорный элемент
        min_row = -1
        for i in range(len(cons)):
            xi = cons[i][min_column]
            if xi == 0:
                continue
            if xi < 0:
                continue
            if min_row == -1:
                b_min = b[i] / xi
                min_row = i
            else:
                if (b[i] / xi) < b_min:
                    b_min = b[i] / xi
                    min_row = i
        # меняем базиз
        basis[min_column] = True
        for i in range(len(cons[min_row])):
            if cons[min_row][i] == 1 and basis[i] == True and i != min_column:
                basis[i] = False

        # делаем так чтобы опорный элемент равнялся единице
        divider = cons[min_row][min_column]
        for i in range(len(cons[min_row])):
            cons[min_row][i] = cons[min_row][i] / divider
        b[min_row] = b[min_row] / divider
        # делаем так чтобы в опорном столбце были все нули кроме опорного элемента
        for i in range(len(cons)):
            if i == min_row:
                continue
            factor = cons[i][min_column] / cons[min_row][min_column]
            for j in range(len(cons[min_row])):
                a = cons[min_row][j] * factor
                cons[i][j] = cons[i][j] - a
            b[i] = b[i] - b[min_row] * factor
        factor = z[min_column] / cons[min_row][min_column]
        for i in range(len(z)):
            z[i] = z[i] - cons[min_row][i] * factor
        b[len(b) - 1] = b[len(b) - 1] - b[min_row] * factor
        table_output(cons, b, z, 'Шаг {}:'.format(step))

    table_output(cons, b, z, 'Конечная симплекс таблица:')
    print('Конечный базис:', end='\t')

    print()
    for i in range(len(cons)):
        for j in range(len(cons[min_row])):
            if cons[i][j] == 1 and basis[j] == True:
                basis[j] = b[i]
    print('\nОтвет: ', end="")
    print(basis)
    print(f'Z = {7 * basis[0] + 13 * basis[1]}')
    print('\n')